name: cd-dgraph
on: workflow_dispatch
jobs:
  dgraph-build-cloud:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          repository: "dgraph-io/cloud"
          token: ${{ secrets.GH_TOKEN }}
          ref: "master"
          path: "cloud"
      - name: Get Go Version
        run: |
          #!/bin/bash
          GOVERSION=1.18 # $({ [ -f .go-version ] && cat .go-version; })
          echo "GOVERSION=$GOVERSION" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Set Dgraph Release Version
        run: |
          #!/bin/bash
          GIT_BRANCH_NAME="release/v22.0.0" # $(git rev-parse --abbrev-ref HEAD)
          if [[ "$GIT_BRANCH_NAME" == "release/v"* ]]; 
          then
            echo "this is a release branch"
          else
            echo "this is NOT a release branch"
            exit 1
          fi
          DGRAPH_RELEASE_VERSION=$(echo $GIT_BRANCH_NAME | sed  's/release\///') # DGRAPH_RELEASE_VERSION=$(git rev-parse --abbrev-ref HEAD | sed  's/release\///')
          echo "making a new release for dgraph cloud "$DGRAPH_RELEASE_VERSION
          echo "DGRAPH_RELEASE_VERSION=$DGRAPH_RELEASE_VERSION" >> $GITHUB_ENV
      - name: Make Alpha Init Restore Binary
        run: |
          cd cloud/script/alpha-init-restore/
          go build
          # restore binary location is /home/runner/work/dgraph/dgraph/script/alpha-init-restore/restore
      - name: Obtain License
        run: |
          touch license
          echo ${{ secrets.CLOUD_LICENSE }} > license
          echo "license"
      - name: Make Dgraph Cloud Docker Image
        run: |
          echo "building dgraph cloud image"
          # docker pull dgraph/dgraph:${{ env.DGRAPH_RELEASE_VERSION }} # pull oss image DONT NEED THIS
          echo """
          FROM dgraph/dgraph:${{ env.DGRAPH_RELEASE_VERSION }}
          COPY cloud/script/alpha-init-restore/restore /usr/local/bin/restore
          RUN chmod +x /usr/local/bin/restore
          COPY license /opt/dgraph/license
          """ > ./Dockerfile
          docker build -f Dockerfile -t gaas/dgraph:${{ env.DGRAPH_RELEASE_VERSION }} .
      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.ECR_USERNAME }}
          password: ${{ secrets.ECR_PASSWORD_TOKEN }}
      - name: Push Images to ECR
        run: |
          docker push gaas/dgraph:${{ env.DGRAPH_RELEASE_VERSION }}
