name: cd-dgraph-cloud
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'environment (stage or prod)'
        required: true
        default: 'stage'
        type: choice
        options: 
          - stage
          - prod
jobs:
  dgraph-cloud:
    environment: '${{ github.event.inputs.environment }}'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Get Go Version
        run: |
          #!/bin/bash
          GOVERSION=$({ [ -f .go-version ] && cat .go-version; })
          echo "GOVERSION=$GOVERSION" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Set Dgraph Release Version
        run: |
          #!/bin/bash
          GIT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$GIT_BRANCH_NAME" == "release/dgraph/v"* ]]; 
          then
            echo "this is a release branch"
          else
            echo "this is NOT a release branch"
            exit 1
          fi
          DGRAPH_RELEASE_VERSION=$(echo $GIT_BRANCH_NAME | sed  's/release\/dgraph\///')
          echo "making a new release for dgraph cloud "$DGRAPH_RELEASE_VERSION
          echo "DGRAPH_RELEASE_VERSION=$DGRAPH_RELEASE_VERSION" >> $GITHUB_ENV
      - name: Make Alpha Init Restore Binary
        run: |
          cd cloud/script/alpha-init-restore/
          go build
          # restore binary location is /home/runner/work/dgraph/dgraph/script/alpha-init-restore/restore
      - name: Obtain License
        run: |
          touch license
          echo ${{ secrets.CLOUD_LICENSE }} > license
          echo "license generated"
      - name: Make Dgraph Cloud Docker Image
        run: |
          echo """
          FROM dgraph/dgraph:${{ env.DGRAPH_RELEASE_VERSION }}
          COPY cloud/script/alpha-init-restore/restore /usr/local/bin/restore
          RUN chmod +x /usr/local/bin/restore
          COPY license /opt/dgraph/license
          """ > ./Dockerfile
          docker build -f Dockerfile -t gaas/dgraph:${{ env.DGRAPH_RELEASE_VERSION }} .
          docker tag gaas/dgraph:${{ env.DGRAPH_RELEASE_VERSION }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/gaas/dgraph:${{ env.DGRAPH_RELEASE_VERSION }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push Images to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/gaas/dgraph:${{ env.DGRAPH_RELEASE_VERSION }}
